<?php

namespace TYPO3\Flow\Persistence\Doctrine\Proxies\__CG__\TYPO3\Flow\Security;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Account extends \TYPO3\Flow\Security\Account implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * {@inheritDoc}
     * @return array
     */
    public function __sleep()
    {
        $properties = array_merge(array('__isInitialized__'), parent::__sleep());

        if ($this->__isInitialized__) {
            $properties = array_diff($properties, array_keys($this->__getLazyProperties()));
        }

        return $properties;
    }

    /**
     * {@inheritDoc}
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Account $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
        parent::__wakeup();
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies', array());

        return parent::Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
    }

    /**
     * {@inheritDoc}
     */
    public function Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies', array());

        return parent::Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies();
    }

    /**
     * {@inheritDoc}
     */
    public function Flow_Aop_Proxy_invokeJoinPoint(\TYPO3\Flow\Aop\JoinPointInterface $joinPoint)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Flow_Aop_Proxy_invokeJoinPoint', array($joinPoint));

        return parent::Flow_Aop_Proxy_invokeJoinPoint($joinPoint);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccountIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccountIdentifier', array());

        return parent::getAccountIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccountIdentifier($accountIdentifier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccountIdentifier', array($accountIdentifier));

        return parent::setAccountIdentifier($accountIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthenticationProviderName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthenticationProviderName', array());

        return parent::getAuthenticationProviderName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthenticationProviderName($authenticationProviderName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthenticationProviderName', array($authenticationProviderName));

        return parent::setAuthenticationProviderName($authenticationProviderName);
    }

    /**
     * {@inheritDoc}
     */
    public function getCredentialsSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredentialsSource', array());

        return parent::getCredentialsSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setCredentialsSource($credentialsSource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCredentialsSource', array($credentialsSource));

        return parent::setCredentialsSource($credentialsSource);
    }

    /**
     * {@inheritDoc}
     */
    public function getParty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParty', array());

        return parent::getParty();
    }

    /**
     * {@inheritDoc}
     */
    public function setParty($party)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParty', array($party));

        return parent::setParty($party);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', array());

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles(array $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', array($roles));

        return parent::setRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole(\TYPO3\Flow\Security\Policy\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', array($role));

        return parent::hasRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function addRole(\TYPO3\Flow\Security\Policy\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', array($role));

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole(\TYPO3\Flow\Security\Policy\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', array($role));

        return parent::removeRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDate', array());

        return parent::getCreationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getExpirationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpirationDate', array());

        return parent::getExpirationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpirationDate(\DateTime $expirationDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpirationDate', array($expirationDate));

        return parent::setExpirationDate($expirationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function isActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', array());

        return parent::isActive();
    }

}
